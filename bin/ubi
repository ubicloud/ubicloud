#!/usr/bin/env ruby
# frozen_string_literal: true

begin
  require_relative "../.env"
rescue LoadError
end

require "net/http"
require "json"

unless (token = ENV["UBI_TOKEN"])
  warn "Personal access token must be provided in UBI_TOKEN env variable for use"
  exit 1
end

url = ENV["UBI_URL"] || "http://api.localhost:9292/cli"
allowed_progs = %w[ssh scp sftp psql pg_dump pg_dumpall]

get_prog = lambda do |prog|
  return unless allowed_progs.include?(prog)
  ENV["UBI_#{prog.upcase}"] || prog
end

uri = URI(url)
data = {"argv" => ARGV}.to_json
headers = {
  "authorization" => "Bearer: #{token}",
  "content-type" => "application/json",
  "accept" => "text/plain",
  "connection" => "close"
}

response = Net::HTTP.post(uri, data, headers)

case response.code.to_i
when 200...300
  if (prog = response["ubi-command-execute"])
    unless (prog = get_prog[prog])
      warn "Invalid server response, unsupported program requested"
      exit 1
    end

    argv_set = ARGV.to_set

    args = response.body.split("\0")
    invalid_message = nil
    sep_seen = false
    custom_arg_seen = false

    args.each do |arg|
      if arg == "--"
        sep_seen = true
      elsif !argv_set.include?(arg)
        if custom_arg_seen
          invalid_message = "Invalid server response, multiple arguments not in submitted argv"
          break
        elsif sep_seen
          custom_arg_seen = true
        else
          invalid_message = "Invalid server response, argument before '--' not in submitted argv"
          break
        end
      end
    end

    unless sep_seen
      invalid_message = "Invalid server response, no '--' in returned argv"
    end

    if invalid_message
      if ENV["UBI_DEBUG"] == "1"
        p [:failure, prog, *args]
      end
      warn invalid_message
      exit 1
    elsif (prog = get_prog[prog])
      if ENV["UBI_DEBUG"] == "1"
        p [:exec, prog, *args]
      end
      Process.exec(prog, *args)
    end
  else
    $stdout.puts response.body
    exit 0
  end
else
  warn response.body
  exit 1
end

#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative "../loader"
require "time"

def main
  st = Prog::Test::HetznerServer.assemble

  strand_states = update_status({})
  retries = 0

  loop do
    begin
      ret = st.run
    # rubocop:disable Lint/RescueException
    rescue Exception => e
      log "Exception: #{e}"
      # retry 5 times, for total of 7:45 minutes before announcing failure
      # sometimes there's some transient network failures which will be resolved if retried.
      if retries < 5
        sleep_duration = 15 * 2**retries
        log "Retrying in #{sleep_duration} seconds ..."
        sleep sleep_duration
        retries += 1
        next
      else
        raise
      end
    end
    # rubocop:enable Lint/RescueException

    strand_states = update_status(strand_states)
    retries = 0

    if ret.is_a?(Prog::Base::Nap)
      sleep ret.seconds
    elsif ret.is_a?(Prog::Base::Exit)
      log "Exited with: #{ret}"
      exit 0
    end
  end
end

def update_status(previous)
  current = Strand.all.map { |x| [x[:id], {prog: x[:prog], label: x[:label]}] }.to_h
  previous.each_pair { |key, value|
    if !current.has_key? key
      log "Strand deleted: id=#{key}, prog=#{value[:prog]}, label=#{value[:label]}"
    elsif current[key] != value
      log "Strand updated: id=#{key}, prog=#{value[:prog]}, label=#{value[:label]} => #{current[key][:label]}"
    end
  }
  current.each_pair { |key, value|
    if !previous.has_key? key
      log "Strand created: id=#{key}, prog=#{value[:prog]}, label=#{value[:label]}"
    end
  }
end

def log(msg)
  puts "#{Time.now.utc.iso8601} #{msg}"
end

main

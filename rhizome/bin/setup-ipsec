#!/bin/env ruby
# frozen_string_literal: true

unless (namespace = ARGV.shift)
  puts "expected namespace as argument"
  exit 1
end

unless (src_clover_ephemeral = ARGV.shift)
  puts "expected src_clover_ephemeral as argument"
  exit 1
end

unless (dst_clover_ephemeral = ARGV.shift)
  puts "expected dst_clover_ephemeral as argument"
  exit 1
end

unless (src_private_addr_6 = ARGV.shift)
  puts "expected src_private_addr_6 as argument"
  exit 1
end

unless (dst_private_addr_6 = ARGV.shift)
  puts "expected dst_private_addr_6 as argument"
  exit 1
end

unless (src_private_addr_4 = ARGV.shift)
  puts "expected src_private_addr_4 as argument"
  exit 1
end

unless (dst_private_addr_4 = ARGV.shift)
  puts "expected dst_private_addr_4 as argument"
  exit 1
end

unless (direction = ARGV.shift)
  puts "expected direction as argument"
  exit 1
end

unless (spi = ARGV.shift)
  puts "expected spi as argument"
  exit 1
end

unless (spi4 = ARGV.shift)
  puts "expected spi4 as argument"
  exit 1
end

unless (security_key = ARGV.shift)
  puts "expected security_key as argument"
  exit 1
end

require_relative "../lib/common"
require_relative "../lib/ipsec_tunnel"

require "fileutils"
require "netaddr"

ipsec_tunnel = IPSecTunnel.new(namespace,
  src_clover_ephemeral, dst_clover_ephemeral,
  src_private_addr_6, dst_private_addr_6,
  src_private_addr_4, dst_private_addr_4,
  spi, spi4, security_key, direction)

ipsec_tunnel.setup

=begin
#Clover API

#API for managing resources on Ubicloud

The version of the OpenAPI document: 0.1.0
Contact: support@ubicloud.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Ubicloud
  class PostgresDatabaseApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new Postgres Database in a specific location of a project
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param postgres_database_name [String] Postgres database name
    # @param create_postgres_database_request [CreatePostgresDatabaseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetPostgresDatabaseDetails200Response]
    def create_postgres_database(project_id, location, postgres_database_name, create_postgres_database_request, opts = {})
      data, _status_code, _headers = create_postgres_database_with_http_info(project_id, location, postgres_database_name, create_postgres_database_request, opts)
      data
    end

    # Create a new Postgres Database in a specific location of a project
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param postgres_database_name [String] Postgres database name
    # @param create_postgres_database_request [CreatePostgresDatabaseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPostgresDatabaseDetails200Response, Integer, Hash)>] GetPostgresDatabaseDetails200Response data, response status code and response headers
    def create_postgres_database_with_http_info(project_id, location, postgres_database_name, create_postgres_database_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PostgresDatabaseApi.create_postgres_database ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PostgresDatabaseApi.create_postgres_database"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling PostgresDatabaseApi.create_postgres_database, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling PostgresDatabaseApi.create_postgres_database"
      end
      # verify the required parameter 'postgres_database_name' is set
      if @api_client.config.client_side_validation && postgres_database_name.nil?
        fail ArgumentError, "Missing the required parameter 'postgres_database_name' when calling PostgresDatabaseApi.create_postgres_database"
      end
      # verify the required parameter 'create_postgres_database_request' is set
      if @api_client.config.client_side_validation && create_postgres_database_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_postgres_database_request' when calling PostgresDatabaseApi.create_postgres_database"
      end
      # resource path
      local_var_path = '/project/{project_id}/location/{location}/postgres/{postgres_database_name}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'location' + '}', CGI.escape(location.to_s)).sub('{' + 'postgres_database_name' + '}', CGI.escape(postgres_database_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_postgres_database_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetPostgresDatabaseDetails200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"PostgresDatabaseApi.create_postgres_database",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PostgresDatabaseApi#create_postgres_database\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specific Postgres Database
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param postgres_database_name [String] Postgres database name
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_postgres_database(project_id, location, postgres_database_name, opts = {})
      delete_postgres_database_with_http_info(project_id, location, postgres_database_name, opts)
      nil
    end

    # Delete a specific Postgres Database
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param postgres_database_name [String] Postgres database name
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_postgres_database_with_http_info(project_id, location, postgres_database_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PostgresDatabaseApi.delete_postgres_database ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PostgresDatabaseApi.delete_postgres_database"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling PostgresDatabaseApi.delete_postgres_database, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling PostgresDatabaseApi.delete_postgres_database"
      end
      # verify the required parameter 'postgres_database_name' is set
      if @api_client.config.client_side_validation && postgres_database_name.nil?
        fail ArgumentError, "Missing the required parameter 'postgres_database_name' when calling PostgresDatabaseApi.delete_postgres_database"
      end
      # resource path
      local_var_path = '/project/{project_id}/location/{location}/postgres/{postgres_database_name}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'location' + '}', CGI.escape(location.to_s)).sub('{' + 'postgres_database_name' + '}', CGI.escape(postgres_database_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"PostgresDatabaseApi.delete_postgres_database",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PostgresDatabaseApi#delete_postgres_database\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download CA certificates for a specific Postgres Database in a location with name
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param postgres_database_name [String] Postgres database name
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_postgres_ca_certificates_by_name(project_id, location, postgres_database_name, opts = {})
      data, _status_code, _headers = get_postgres_ca_certificates_by_name_with_http_info(project_id, location, postgres_database_name, opts)
      data
    end

    # Download CA certificates for a specific Postgres Database in a location with name
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param postgres_database_name [String] Postgres database name
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_postgres_ca_certificates_by_name_with_http_info(project_id, location, postgres_database_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PostgresDatabaseApi.get_postgres_ca_certificates_by_name ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PostgresDatabaseApi.get_postgres_ca_certificates_by_name"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling PostgresDatabaseApi.get_postgres_ca_certificates_by_name, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling PostgresDatabaseApi.get_postgres_ca_certificates_by_name"
      end
      # verify the required parameter 'postgres_database_name' is set
      if @api_client.config.client_side_validation && postgres_database_name.nil?
        fail ArgumentError, "Missing the required parameter 'postgres_database_name' when calling PostgresDatabaseApi.get_postgres_ca_certificates_by_name"
      end
      # resource path
      local_var_path = '/project/{project_id}/location/{location}/postgres/{postgres_database_name}/ca-certificates'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'location' + '}', CGI.escape(location.to_s)).sub('{' + 'postgres_database_name' + '}', CGI.escape(postgres_database_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/x-pem-file', 'application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"PostgresDatabaseApi.get_postgres_ca_certificates_by_name",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PostgresDatabaseApi#get_postgres_ca_certificates_by_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details of a specific Postgres database in a location
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param postgres_database_name [String] Postgres database name
    # @param [Hash] opts the optional parameters
    # @return [GetPostgresDatabaseDetails200Response]
    def get_postgres_database_details(project_id, location, postgres_database_name, opts = {})
      data, _status_code, _headers = get_postgres_database_details_with_http_info(project_id, location, postgres_database_name, opts)
      data
    end

    # Get details of a specific Postgres database in a location
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param postgres_database_name [String] Postgres database name
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPostgresDatabaseDetails200Response, Integer, Hash)>] GetPostgresDatabaseDetails200Response data, response status code and response headers
    def get_postgres_database_details_with_http_info(project_id, location, postgres_database_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PostgresDatabaseApi.get_postgres_database_details ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PostgresDatabaseApi.get_postgres_database_details"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling PostgresDatabaseApi.get_postgres_database_details, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling PostgresDatabaseApi.get_postgres_database_details"
      end
      # verify the required parameter 'postgres_database_name' is set
      if @api_client.config.client_side_validation && postgres_database_name.nil?
        fail ArgumentError, "Missing the required parameter 'postgres_database_name' when calling PostgresDatabaseApi.get_postgres_database_details"
      end
      # resource path
      local_var_path = '/project/{project_id}/location/{location}/postgres/{postgres_database_name}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'location' + '}', CGI.escape(location.to_s)).sub('{' + 'postgres_database_name' + '}', CGI.escape(postgres_database_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPostgresDatabaseDetails200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"PostgresDatabaseApi.get_postgres_database_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PostgresDatabaseApi#get_postgres_database_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Postgres Databases in a specific location of a project
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_after Pagination - Start after
    # @option opts [Integer] :page_size Pagination - Page size (default to 10)
    # @option opts [String] :order_column Pagination - Order column (default to 'id')
    # @return [ListLocationPostgresDatabases200Response]
    def list_location_postgres_databases(project_id, location, opts = {})
      data, _status_code, _headers = list_location_postgres_databases_with_http_info(project_id, location, opts)
      data
    end

    # List Postgres Databases in a specific location of a project
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_after Pagination - Start after
    # @option opts [Integer] :page_size Pagination - Page size (default to 10)
    # @option opts [String] :order_column Pagination - Order column (default to 'id')
    # @return [Array<(ListLocationPostgresDatabases200Response, Integer, Hash)>] ListLocationPostgresDatabases200Response data, response status code and response headers
    def list_location_postgres_databases_with_http_info(project_id, location, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PostgresDatabaseApi.list_location_postgres_databases ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PostgresDatabaseApi.list_location_postgres_databases"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling PostgresDatabaseApi.list_location_postgres_databases, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling PostgresDatabaseApi.list_location_postgres_databases"
      end
      # resource path
      local_var_path = '/project/{project_id}/location/{location}/postgres'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'location' + '}', CGI.escape(location.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_after'] = opts[:'start_after'] if !opts[:'start_after'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'order_column'] = opts[:'order_column'] if !opts[:'order_column'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListLocationPostgresDatabases200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"PostgresDatabaseApi.list_location_postgres_databases",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PostgresDatabaseApi#list_location_postgres_databases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List visible Postgres Databases
    # @param project_id [String] ID of the project
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_after Pagination - Start after
    # @option opts [Integer] :page_size Pagination - Page size (default to 10)
    # @option opts [String] :order_column Pagination - Order column (default to 'id')
    # @return [ListLocationPostgresDatabases200Response]
    def list_postgres_databases(project_id, opts = {})
      data, _status_code, _headers = list_postgres_databases_with_http_info(project_id, opts)
      data
    end

    # List visible Postgres Databases
    # @param project_id [String] ID of the project
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_after Pagination - Start after
    # @option opts [Integer] :page_size Pagination - Page size (default to 10)
    # @option opts [String] :order_column Pagination - Order column (default to 'id')
    # @return [Array<(ListLocationPostgresDatabases200Response, Integer, Hash)>] ListLocationPostgresDatabases200Response data, response status code and response headers
    def list_postgres_databases_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PostgresDatabaseApi.list_postgres_databases ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PostgresDatabaseApi.list_postgres_databases"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling PostgresDatabaseApi.list_postgres_databases, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/project/{project_id}/postgres'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_after'] = opts[:'start_after'] if !opts[:'start_after'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'order_column'] = opts[:'order_column'] if !opts[:'order_column'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListLocationPostgresDatabases200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"PostgresDatabaseApi.list_postgres_databases",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PostgresDatabaseApi#list_postgres_databases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset superuser password of the Postgres database
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param postgres_database_name [String] Postgres database name
    # @param reset_superuser_password_request [ResetSuperuserPasswordRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetPostgresDatabaseDetails200Response]
    def reset_superuser_password(project_id, location, postgres_database_name, reset_superuser_password_request, opts = {})
      data, _status_code, _headers = reset_superuser_password_with_http_info(project_id, location, postgres_database_name, reset_superuser_password_request, opts)
      data
    end

    # Reset superuser password of the Postgres database
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param postgres_database_name [String] Postgres database name
    # @param reset_superuser_password_request [ResetSuperuserPasswordRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPostgresDatabaseDetails200Response, Integer, Hash)>] GetPostgresDatabaseDetails200Response data, response status code and response headers
    def reset_superuser_password_with_http_info(project_id, location, postgres_database_name, reset_superuser_password_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PostgresDatabaseApi.reset_superuser_password ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PostgresDatabaseApi.reset_superuser_password"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling PostgresDatabaseApi.reset_superuser_password, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling PostgresDatabaseApi.reset_superuser_password"
      end
      # verify the required parameter 'postgres_database_name' is set
      if @api_client.config.client_side_validation && postgres_database_name.nil?
        fail ArgumentError, "Missing the required parameter 'postgres_database_name' when calling PostgresDatabaseApi.reset_superuser_password"
      end
      # verify the required parameter 'reset_superuser_password_request' is set
      if @api_client.config.client_side_validation && reset_superuser_password_request.nil?
        fail ArgumentError, "Missing the required parameter 'reset_superuser_password_request' when calling PostgresDatabaseApi.reset_superuser_password"
      end
      # resource path
      local_var_path = '/project/{project_id}/location/{location}/postgres/{postgres_database_name}/reset-superuser-password'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'location' + '}', CGI.escape(location.to_s)).sub('{' + 'postgres_database_name' + '}', CGI.escape(postgres_database_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reset_superuser_password_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetPostgresDatabaseDetails200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"PostgresDatabaseApi.reset_superuser_password",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PostgresDatabaseApi#reset_superuser_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Restart a specific Postgres Database
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param postgres_database_name [String] Postgres database name
    # @param [Hash] opts the optional parameters
    # @return [GetPostgresDatabaseDetails200Response]
    def restart_postgres_database(project_id, location, postgres_database_name, opts = {})
      data, _status_code, _headers = restart_postgres_database_with_http_info(project_id, location, postgres_database_name, opts)
      data
    end

    # Restart a specific Postgres Database
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param postgres_database_name [String] Postgres database name
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPostgresDatabaseDetails200Response, Integer, Hash)>] GetPostgresDatabaseDetails200Response data, response status code and response headers
    def restart_postgres_database_with_http_info(project_id, location, postgres_database_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PostgresDatabaseApi.restart_postgres_database ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PostgresDatabaseApi.restart_postgres_database"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling PostgresDatabaseApi.restart_postgres_database, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling PostgresDatabaseApi.restart_postgres_database"
      end
      # verify the required parameter 'postgres_database_name' is set
      if @api_client.config.client_side_validation && postgres_database_name.nil?
        fail ArgumentError, "Missing the required parameter 'postgres_database_name' when calling PostgresDatabaseApi.restart_postgres_database"
      end
      # resource path
      local_var_path = '/project/{project_id}/location/{location}/postgres/{postgres_database_name}/restart'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'location' + '}', CGI.escape(location.to_s)).sub('{' + 'postgres_database_name' + '}', CGI.escape(postgres_database_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPostgresDatabaseDetails200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"PostgresDatabaseApi.restart_postgres_database",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PostgresDatabaseApi#restart_postgres_database\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Restore a new Postgres database in a specific location of a project
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param postgres_database_name [String] Postgres database name
    # @param restore_postgres_database_request [RestorePostgresDatabaseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetPostgresDatabaseDetails200Response]
    def restore_postgres_database(project_id, location, postgres_database_name, restore_postgres_database_request, opts = {})
      data, _status_code, _headers = restore_postgres_database_with_http_info(project_id, location, postgres_database_name, restore_postgres_database_request, opts)
      data
    end

    # Restore a new Postgres database in a specific location of a project
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param postgres_database_name [String] Postgres database name
    # @param restore_postgres_database_request [RestorePostgresDatabaseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPostgresDatabaseDetails200Response, Integer, Hash)>] GetPostgresDatabaseDetails200Response data, response status code and response headers
    def restore_postgres_database_with_http_info(project_id, location, postgres_database_name, restore_postgres_database_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PostgresDatabaseApi.restore_postgres_database ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PostgresDatabaseApi.restore_postgres_database"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling PostgresDatabaseApi.restore_postgres_database, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling PostgresDatabaseApi.restore_postgres_database"
      end
      # verify the required parameter 'postgres_database_name' is set
      if @api_client.config.client_side_validation && postgres_database_name.nil?
        fail ArgumentError, "Missing the required parameter 'postgres_database_name' when calling PostgresDatabaseApi.restore_postgres_database"
      end
      # verify the required parameter 'restore_postgres_database_request' is set
      if @api_client.config.client_side_validation && restore_postgres_database_request.nil?
        fail ArgumentError, "Missing the required parameter 'restore_postgres_database_request' when calling PostgresDatabaseApi.restore_postgres_database"
      end
      # resource path
      local_var_path = '/project/{project_id}/location/{location}/postgres/{postgres_database_name}/restore'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'location' + '}', CGI.escape(location.to_s)).sub('{' + 'postgres_database_name' + '}', CGI.escape(postgres_database_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(restore_postgres_database_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetPostgresDatabaseDetails200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"PostgresDatabaseApi.restore_postgres_database",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PostgresDatabaseApi#restore_postgres_database\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

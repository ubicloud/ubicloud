=begin
#Clover API

#API for managing resources on Ubicloud

The version of the OpenAPI document: 0.1.0
Contact: support@ubicloud.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Ubicloud
  class LoadBalancerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Attach a VM to a Load Balancer in a specific location of a project
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param load_balancer_name [String] Name of the load balancer
    # @param attach_vm_location_load_balancer_request [AttachVmLocationLoadBalancerRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetLoadBalancer200Response]
    def attach_vm_location_load_balancer(project_id, location, load_balancer_name, attach_vm_location_load_balancer_request, opts = {})
      data, _status_code, _headers = attach_vm_location_load_balancer_with_http_info(project_id, location, load_balancer_name, attach_vm_location_load_balancer_request, opts)
      data
    end

    # Attach a VM to a Load Balancer in a specific location of a project
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param load_balancer_name [String] Name of the load balancer
    # @param attach_vm_location_load_balancer_request [AttachVmLocationLoadBalancerRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLoadBalancer200Response, Integer, Hash)>] GetLoadBalancer200Response data, response status code and response headers
    def attach_vm_location_load_balancer_with_http_info(project_id, location, load_balancer_name, attach_vm_location_load_balancer_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerApi.attach_vm_location_load_balancer ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerApi.attach_vm_location_load_balancer"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling LoadBalancerApi.attach_vm_location_load_balancer, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling LoadBalancerApi.attach_vm_location_load_balancer"
      end
      # verify the required parameter 'load_balancer_name' is set
      if @api_client.config.client_side_validation && load_balancer_name.nil?
        fail ArgumentError, "Missing the required parameter 'load_balancer_name' when calling LoadBalancerApi.attach_vm_location_load_balancer"
      end
      # verify the required parameter 'attach_vm_location_load_balancer_request' is set
      if @api_client.config.client_side_validation && attach_vm_location_load_balancer_request.nil?
        fail ArgumentError, "Missing the required parameter 'attach_vm_location_load_balancer_request' when calling LoadBalancerApi.attach_vm_location_load_balancer"
      end
      # resource path
      local_var_path = '/project/{project_id}/location/{location}/load-balancer/{load_balancer_name}/attach-vm'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'location' + '}', CGI.escape(location.to_s)).sub('{' + 'load_balancer_name' + '}', CGI.escape(load_balancer_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(attach_vm_location_load_balancer_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetLoadBalancer200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"LoadBalancerApi.attach_vm_location_load_balancer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerApi#attach_vm_location_load_balancer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Load Balancer in a project
    # @param project_id [String] ID of the project
    # @param load_balancer_name [String] Name of the load balancer
    # @param create_load_balancer_request [CreateLoadBalancerRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetLoadBalancer200Response]
    def create_load_balancer(project_id, load_balancer_name, create_load_balancer_request, opts = {})
      data, _status_code, _headers = create_load_balancer_with_http_info(project_id, load_balancer_name, create_load_balancer_request, opts)
      data
    end

    # Create a new Load Balancer in a project
    # @param project_id [String] ID of the project
    # @param load_balancer_name [String] Name of the load balancer
    # @param create_load_balancer_request [CreateLoadBalancerRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLoadBalancer200Response, Integer, Hash)>] GetLoadBalancer200Response data, response status code and response headers
    def create_load_balancer_with_http_info(project_id, load_balancer_name, create_load_balancer_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerApi.create_load_balancer ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerApi.create_load_balancer"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling LoadBalancerApi.create_load_balancer, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'load_balancer_name' is set
      if @api_client.config.client_side_validation && load_balancer_name.nil?
        fail ArgumentError, "Missing the required parameter 'load_balancer_name' when calling LoadBalancerApi.create_load_balancer"
      end
      # verify the required parameter 'create_load_balancer_request' is set
      if @api_client.config.client_side_validation && create_load_balancer_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_load_balancer_request' when calling LoadBalancerApi.create_load_balancer"
      end
      # resource path
      local_var_path = '/project/{project_id}/load-balancer/{load_balancer_name}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'load_balancer_name' + '}', CGI.escape(load_balancer_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_load_balancer_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetLoadBalancer200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"LoadBalancerApi.create_load_balancer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerApi#create_load_balancer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Load Balancer in a specific location of a project
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param load_balancer_name [String] Name of the load balancer
    # @param create_load_balancer_request [CreateLoadBalancerRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetLoadBalancer200Response]
    def create_location_load_balancer(project_id, location, load_balancer_name, create_load_balancer_request, opts = {})
      data, _status_code, _headers = create_location_load_balancer_with_http_info(project_id, location, load_balancer_name, create_load_balancer_request, opts)
      data
    end

    # Create a new Load Balancer in a specific location of a project
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param load_balancer_name [String] Name of the load balancer
    # @param create_load_balancer_request [CreateLoadBalancerRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLoadBalancer200Response, Integer, Hash)>] GetLoadBalancer200Response data, response status code and response headers
    def create_location_load_balancer_with_http_info(project_id, location, load_balancer_name, create_load_balancer_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerApi.create_location_load_balancer ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerApi.create_location_load_balancer"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling LoadBalancerApi.create_location_load_balancer, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling LoadBalancerApi.create_location_load_balancer"
      end
      # verify the required parameter 'load_balancer_name' is set
      if @api_client.config.client_side_validation && load_balancer_name.nil?
        fail ArgumentError, "Missing the required parameter 'load_balancer_name' when calling LoadBalancerApi.create_location_load_balancer"
      end
      # verify the required parameter 'create_load_balancer_request' is set
      if @api_client.config.client_side_validation && create_load_balancer_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_load_balancer_request' when calling LoadBalancerApi.create_location_load_balancer"
      end
      # resource path
      local_var_path = '/project/{project_id}/location/{location}/load-balancer/{load_balancer_name}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'location' + '}', CGI.escape(location.to_s)).sub('{' + 'load_balancer_name' + '}', CGI.escape(load_balancer_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_load_balancer_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetLoadBalancer200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"LoadBalancerApi.create_location_load_balancer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerApi#create_location_load_balancer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specific Load Balancer
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param load_balancer_name [String] Name of the load balancer
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_load_balancer(project_id, location, load_balancer_name, opts = {})
      delete_load_balancer_with_http_info(project_id, location, load_balancer_name, opts)
      nil
    end

    # Delete a specific Load Balancer
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param load_balancer_name [String] Name of the load balancer
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_load_balancer_with_http_info(project_id, location, load_balancer_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerApi.delete_load_balancer ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerApi.delete_load_balancer"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling LoadBalancerApi.delete_load_balancer, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling LoadBalancerApi.delete_load_balancer"
      end
      # verify the required parameter 'load_balancer_name' is set
      if @api_client.config.client_side_validation && load_balancer_name.nil?
        fail ArgumentError, "Missing the required parameter 'load_balancer_name' when calling LoadBalancerApi.delete_load_balancer"
      end
      # resource path
      local_var_path = '/project/{project_id}/location/{location}/load-balancer/{load_balancer_name}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'location' + '}', CGI.escape(location.to_s)).sub('{' + 'load_balancer_name' + '}', CGI.escape(load_balancer_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"LoadBalancerApi.delete_load_balancer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerApi#delete_load_balancer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detach a VM from a Load Balancer in a specific location of a project
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param load_balancer_name [String] Name of the load balancer
    # @param detach_vm_location_load_balancer_request [DetachVmLocationLoadBalancerRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetLoadBalancer200Response]
    def detach_vm_location_load_balancer(project_id, location, load_balancer_name, detach_vm_location_load_balancer_request, opts = {})
      data, _status_code, _headers = detach_vm_location_load_balancer_with_http_info(project_id, location, load_balancer_name, detach_vm_location_load_balancer_request, opts)
      data
    end

    # Detach a VM from a Load Balancer in a specific location of a project
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param load_balancer_name [String] Name of the load balancer
    # @param detach_vm_location_load_balancer_request [DetachVmLocationLoadBalancerRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLoadBalancer200Response, Integer, Hash)>] GetLoadBalancer200Response data, response status code and response headers
    def detach_vm_location_load_balancer_with_http_info(project_id, location, load_balancer_name, detach_vm_location_load_balancer_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerApi.detach_vm_location_load_balancer ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerApi.detach_vm_location_load_balancer"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling LoadBalancerApi.detach_vm_location_load_balancer, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling LoadBalancerApi.detach_vm_location_load_balancer"
      end
      # verify the required parameter 'load_balancer_name' is set
      if @api_client.config.client_side_validation && load_balancer_name.nil?
        fail ArgumentError, "Missing the required parameter 'load_balancer_name' when calling LoadBalancerApi.detach_vm_location_load_balancer"
      end
      # verify the required parameter 'detach_vm_location_load_balancer_request' is set
      if @api_client.config.client_side_validation && detach_vm_location_load_balancer_request.nil?
        fail ArgumentError, "Missing the required parameter 'detach_vm_location_load_balancer_request' when calling LoadBalancerApi.detach_vm_location_load_balancer"
      end
      # resource path
      local_var_path = '/project/{project_id}/location/{location}/load-balancer/{load_balancer_name}/detach-vm'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'location' + '}', CGI.escape(location.to_s)).sub('{' + 'load_balancer_name' + '}', CGI.escape(load_balancer_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(detach_vm_location_load_balancer_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetLoadBalancer200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"LoadBalancerApi.detach_vm_location_load_balancer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerApi#detach_vm_location_load_balancer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details of a specific Load Balancer
    # @param project_id [String] ID of the project
    # @param load_balancer_name [String] Name of the load balancer
    # @param [Hash] opts the optional parameters
    # @return [GetLoadBalancer200Response]
    def get_load_balancer(project_id, load_balancer_name, opts = {})
      data, _status_code, _headers = get_load_balancer_with_http_info(project_id, load_balancer_name, opts)
      data
    end

    # Get details of a specific Load Balancer
    # @param project_id [String] ID of the project
    # @param load_balancer_name [String] Name of the load balancer
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLoadBalancer200Response, Integer, Hash)>] GetLoadBalancer200Response data, response status code and response headers
    def get_load_balancer_with_http_info(project_id, load_balancer_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerApi.get_load_balancer ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerApi.get_load_balancer"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling LoadBalancerApi.get_load_balancer, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'load_balancer_name' is set
      if @api_client.config.client_side_validation && load_balancer_name.nil?
        fail ArgumentError, "Missing the required parameter 'load_balancer_name' when calling LoadBalancerApi.get_load_balancer"
      end
      # resource path
      local_var_path = '/project/{project_id}/load-balancer/{load_balancer_name}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'load_balancer_name' + '}', CGI.escape(load_balancer_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLoadBalancer200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"LoadBalancerApi.get_load_balancer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerApi#get_load_balancer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details of a specific Load Balancer in a location
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param load_balancer_name [String] Name of the load balancer
    # @param [Hash] opts the optional parameters
    # @return [GetLoadBalancer200Response]
    def get_load_balancer_details(project_id, location, load_balancer_name, opts = {})
      data, _status_code, _headers = get_load_balancer_details_with_http_info(project_id, location, load_balancer_name, opts)
      data
    end

    # Get details of a specific Load Balancer in a location
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param load_balancer_name [String] Name of the load balancer
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLoadBalancer200Response, Integer, Hash)>] GetLoadBalancer200Response data, response status code and response headers
    def get_load_balancer_details_with_http_info(project_id, location, load_balancer_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerApi.get_load_balancer_details ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerApi.get_load_balancer_details"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling LoadBalancerApi.get_load_balancer_details, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling LoadBalancerApi.get_load_balancer_details"
      end
      # verify the required parameter 'load_balancer_name' is set
      if @api_client.config.client_side_validation && load_balancer_name.nil?
        fail ArgumentError, "Missing the required parameter 'load_balancer_name' when calling LoadBalancerApi.get_load_balancer_details"
      end
      # resource path
      local_var_path = '/project/{project_id}/location/{location}/load-balancer/{load_balancer_name}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'location' + '}', CGI.escape(location.to_s)).sub('{' + 'load_balancer_name' + '}', CGI.escape(load_balancer_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLoadBalancer200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"LoadBalancerApi.get_load_balancer_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerApi#get_load_balancer_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Load Balancers in a specific project
    # @param project_id [String] ID of the project
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_after Pagination - Start after
    # @option opts [Integer] :page_size Pagination - Page size (default to 10)
    # @option opts [String] :order_column Pagination - Order column (default to 'id')
    # @return [ListLoadBalancers200Response]
    def list_load_balancers(project_id, opts = {})
      data, _status_code, _headers = list_load_balancers_with_http_info(project_id, opts)
      data
    end

    # List Load Balancers in a specific project
    # @param project_id [String] ID of the project
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_after Pagination - Start after
    # @option opts [Integer] :page_size Pagination - Page size (default to 10)
    # @option opts [String] :order_column Pagination - Order column (default to 'id')
    # @return [Array<(ListLoadBalancers200Response, Integer, Hash)>] ListLoadBalancers200Response data, response status code and response headers
    def list_load_balancers_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerApi.list_load_balancers ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerApi.list_load_balancers"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling LoadBalancerApi.list_load_balancers, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/project/{project_id}/load-balancer'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_after'] = opts[:'start_after'] if !opts[:'start_after'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'order_column'] = opts[:'order_column'] if !opts[:'order_column'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListLoadBalancers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"LoadBalancerApi.list_load_balancers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerApi#list_load_balancers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Load Balancers in a specific location of a project
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_after Pagination - Start after
    # @option opts [Integer] :page_size Pagination - Page size (default to 10)
    # @option opts [String] :order_column Pagination - Order column (default to 'id')
    # @return [ListLoadBalancers200Response]
    def list_location_load_balancers(project_id, location, opts = {})
      data, _status_code, _headers = list_location_load_balancers_with_http_info(project_id, location, opts)
      data
    end

    # List Load Balancers in a specific location of a project
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_after Pagination - Start after
    # @option opts [Integer] :page_size Pagination - Page size (default to 10)
    # @option opts [String] :order_column Pagination - Order column (default to 'id')
    # @return [Array<(ListLoadBalancers200Response, Integer, Hash)>] ListLoadBalancers200Response data, response status code and response headers
    def list_location_load_balancers_with_http_info(project_id, location, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerApi.list_location_load_balancers ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerApi.list_location_load_balancers"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling LoadBalancerApi.list_location_load_balancers, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling LoadBalancerApi.list_location_load_balancers"
      end
      # resource path
      local_var_path = '/project/{project_id}/location/{location}/load-balancer'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'location' + '}', CGI.escape(location.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_after'] = opts[:'start_after'] if !opts[:'start_after'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'order_column'] = opts[:'order_column'] if !opts[:'order_column'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListLoadBalancers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"LoadBalancerApi.list_location_load_balancers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerApi#list_location_load_balancers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Load Balancer in a specific location of a project
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param load_balancer_name [String] Name of the load balancer
    # @param patch_location_load_balancer_request [PatchLocationLoadBalancerRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetLoadBalancer200Response]
    def patch_location_load_balancer(project_id, location, load_balancer_name, patch_location_load_balancer_request, opts = {})
      data, _status_code, _headers = patch_location_load_balancer_with_http_info(project_id, location, load_balancer_name, patch_location_load_balancer_request, opts)
      data
    end

    # Update a Load Balancer in a specific location of a project
    # @param project_id [String] ID of the project
    # @param location [String] The Ubicloud location/region
    # @param load_balancer_name [String] Name of the load balancer
    # @param patch_location_load_balancer_request [PatchLocationLoadBalancerRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLoadBalancer200Response, Integer, Hash)>] GetLoadBalancer200Response data, response status code and response headers
    def patch_location_load_balancer_with_http_info(project_id, location, load_balancer_name, patch_location_load_balancer_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerApi.patch_location_load_balancer ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling LoadBalancerApi.patch_location_load_balancer"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling LoadBalancerApi.patch_location_load_balancer, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling LoadBalancerApi.patch_location_load_balancer"
      end
      # verify the required parameter 'load_balancer_name' is set
      if @api_client.config.client_side_validation && load_balancer_name.nil?
        fail ArgumentError, "Missing the required parameter 'load_balancer_name' when calling LoadBalancerApi.patch_location_load_balancer"
      end
      # verify the required parameter 'patch_location_load_balancer_request' is set
      if @api_client.config.client_side_validation && patch_location_load_balancer_request.nil?
        fail ArgumentError, "Missing the required parameter 'patch_location_load_balancer_request' when calling LoadBalancerApi.patch_location_load_balancer"
      end
      # resource path
      local_var_path = '/project/{project_id}/location/{location}/load-balancer/{load_balancer_name}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'location' + '}', CGI.escape(location.to_s)).sub('{' + 'load_balancer_name' + '}', CGI.escape(load_balancer_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(patch_location_load_balancer_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetLoadBalancer200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"LoadBalancerApi.patch_location_load_balancer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerApi#patch_location_load_balancer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

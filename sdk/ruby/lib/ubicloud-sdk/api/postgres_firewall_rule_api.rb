=begin
#Clover API

#API for managing resources on Ubicloud

The version of the OpenAPI document: 0.1.0
Contact: support@ubicloud.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Ubicloud
  class PostgresFirewallRuleApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new postgres firewall rule
    # @param location [String] The Ubicloud location/region
    # @param postgres_database_name [String] Postgres database name
    # @param project_id [String] ID of the project
    # @param create_location_postgres_firewall_rule_request [CreateLocationPostgresFirewallRuleRequest] 
    # @param [Hash] opts the optional parameters
    # @return [PostgresFirewallRule]
    def create_location_postgres_firewall_rule(location, postgres_database_name, project_id, create_location_postgres_firewall_rule_request, opts = {})
      data, _status_code, _headers = create_location_postgres_firewall_rule_with_http_info(location, postgres_database_name, project_id, create_location_postgres_firewall_rule_request, opts)
      data
    end

    # Create a new postgres firewall rule
    # @param location [String] The Ubicloud location/region
    # @param postgres_database_name [String] Postgres database name
    # @param project_id [String] ID of the project
    # @param create_location_postgres_firewall_rule_request [CreateLocationPostgresFirewallRuleRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostgresFirewallRule, Integer, Hash)>] PostgresFirewallRule data, response status code and response headers
    def create_location_postgres_firewall_rule_with_http_info(location, postgres_database_name, project_id, create_location_postgres_firewall_rule_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PostgresFirewallRuleApi.create_location_postgres_firewall_rule ...'
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling PostgresFirewallRuleApi.create_location_postgres_firewall_rule"
      end
      # verify the required parameter 'postgres_database_name' is set
      if @api_client.config.client_side_validation && postgres_database_name.nil?
        fail ArgumentError, "Missing the required parameter 'postgres_database_name' when calling PostgresFirewallRuleApi.create_location_postgres_firewall_rule"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PostgresFirewallRuleApi.create_location_postgres_firewall_rule"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling PostgresFirewallRuleApi.create_location_postgres_firewall_rule, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'create_location_postgres_firewall_rule_request' is set
      if @api_client.config.client_side_validation && create_location_postgres_firewall_rule_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_location_postgres_firewall_rule_request' when calling PostgresFirewallRuleApi.create_location_postgres_firewall_rule"
      end
      # resource path
      local_var_path = '/project/{project_id}/location/{location}/postgres/{postgres_database_name}/firewall-rule'.sub('{' + 'location' + '}', CGI.escape(location.to_s)).sub('{' + 'postgres_database_name' + '}', CGI.escape(postgres_database_name.to_s)).sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_location_postgres_firewall_rule_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PostgresFirewallRule'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"PostgresFirewallRuleApi.create_location_postgres_firewall_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PostgresFirewallRuleApi#create_location_postgres_firewall_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List location Postgres firewall rules
    # @param location [String] The Ubicloud location/region
    # @param postgres_database_name [String] Postgres database name
    # @param project_id [String] ID of the project
    # @param [Hash] opts the optional parameters
    # @return [ListLocationPostgresFirewallRules200Response]
    def list_location_postgres_firewall_rules(location, postgres_database_name, project_id, opts = {})
      data, _status_code, _headers = list_location_postgres_firewall_rules_with_http_info(location, postgres_database_name, project_id, opts)
      data
    end

    # List location Postgres firewall rules
    # @param location [String] The Ubicloud location/region
    # @param postgres_database_name [String] Postgres database name
    # @param project_id [String] ID of the project
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListLocationPostgresFirewallRules200Response, Integer, Hash)>] ListLocationPostgresFirewallRules200Response data, response status code and response headers
    def list_location_postgres_firewall_rules_with_http_info(location, postgres_database_name, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PostgresFirewallRuleApi.list_location_postgres_firewall_rules ...'
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling PostgresFirewallRuleApi.list_location_postgres_firewall_rules"
      end
      # verify the required parameter 'postgres_database_name' is set
      if @api_client.config.client_side_validation && postgres_database_name.nil?
        fail ArgumentError, "Missing the required parameter 'postgres_database_name' when calling PostgresFirewallRuleApi.list_location_postgres_firewall_rules"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling PostgresFirewallRuleApi.list_location_postgres_firewall_rules"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling PostgresFirewallRuleApi.list_location_postgres_firewall_rules, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/project/{project_id}/location/{location}/postgres/{postgres_database_name}/firewall-rule'.sub('{' + 'location' + '}', CGI.escape(location.to_s)).sub('{' + 'postgres_database_name' + '}', CGI.escape(postgres_database_name.to_s)).sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListLocationPostgresFirewallRules200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"PostgresFirewallRuleApi.list_location_postgres_firewall_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PostgresFirewallRuleApi#list_location_postgres_firewall_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

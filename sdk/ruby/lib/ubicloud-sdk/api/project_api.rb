=begin
#Clover API

#API for managing resources on Ubicloud

The version of the OpenAPI document: 0.1.0
Contact: support@ubicloud.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Ubicloud
  class ProjectApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new project
    # @param create_project_request [CreateProjectRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def create_project(create_project_request, opts = {})
      data, _status_code, _headers = create_project_with_http_info(create_project_request, opts)
      data
    end

    # Create a new project
    # @param create_project_request [CreateProjectRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def create_project_with_http_info(create_project_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.create_project ...'
      end
      # verify the required parameter 'create_project_request' is set
      if @api_client.config.client_side_validation && create_project_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_project_request' when calling ProjectApi.create_project"
      end
      # resource path
      local_var_path = '/project'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_project_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Project'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"ProjectApi.create_project",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#create_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a project
    # @param project_id [String] ID of the project
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_project(project_id, opts = {})
      delete_project_with_http_info(project_id, opts)
      nil
    end

    # Delete a project
    # @param project_id [String] ID of the project
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_project_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.delete_project ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.delete_project"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling ProjectApi.delete_project, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/project/{project_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"ProjectApi.delete_project",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#delete_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return information on object type, location, and name
    # @param project_id [String] ID of the project
    # @param object_id [String] ID of a supported object
    # @param [Hash] opts the optional parameters
    # @return [GetObjectInfo200Response]
    def get_object_info(project_id, object_id, opts = {})
      data, _status_code, _headers = get_object_info_with_http_info(project_id, object_id, opts)
      data
    end

    # Return information on object type, location, and name
    # @param project_id [String] ID of the project
    # @param object_id [String] ID of a supported object
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetObjectInfo200Response, Integer, Hash)>] GetObjectInfo200Response data, response status code and response headers
    def get_object_info_with_http_info(project_id, object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.get_object_info ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.get_object_info"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling ProjectApi.get_object_info, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'object_id' is set
      if @api_client.config.client_side_validation && object_id.nil?
        fail ArgumentError, "Missing the required parameter 'object_id' when calling ProjectApi.get_object_info"
      end
      pattern = Regexp.new(/^(fw|1b|pg|ps|vm)[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && object_id !~ pattern
        fail ArgumentError, "invalid value for 'object_id' when calling ProjectApi.get_object_info, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/project/{project_id}/object-info/{object_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'object_id' + '}', CGI.escape(object_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetObjectInfo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"ProjectApi.get_object_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#get_object_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a project
    # @param project_id [String] ID of the project
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def get_project(project_id, opts = {})
      data, _status_code, _headers = get_project_with_http_info(project_id, opts)
      data
    end

    # Retrieve a project
    # @param project_id [String] ID of the project
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def get_project_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.get_project ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectApi.get_project"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling ProjectApi.get_project, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/project/{project_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Project'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"ProjectApi.get_project",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#get_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all projects visible to the logged in user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_after Pagination - Start after
    # @option opts [Integer] :page_size Pagination - Page size (default to 10)
    # @option opts [String] :order_column Pagination - Order column (default to 'id')
    # @return [ListProjects200Response]
    def list_projects(opts = {})
      data, _status_code, _headers = list_projects_with_http_info(opts)
      data
    end

    # List all projects visible to the logged in user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_after Pagination - Start after
    # @option opts [Integer] :page_size Pagination - Page size (default to 10)
    # @option opts [String] :order_column Pagination - Order column (default to 'id')
    # @return [Array<(ListProjects200Response, Integer, Hash)>] ListProjects200Response data, response status code and response headers
    def list_projects_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.list_projects ...'
      end
      # resource path
      local_var_path = '/project'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_after'] = opts[:'start_after'] if !opts[:'start_after'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'order_column'] = opts[:'order_column'] if !opts[:'order_column'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListProjects200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"ProjectApi.list_projects",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#list_projects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#Clover API

#API for managing resources on Ubicloud

The version of the OpenAPI document: 0.1.0
Contact: support@ubicloud.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Ubicloud
  class FirewallApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Attach a subnet to firewall
    # @param location [String] The Ubicloud location/region
    # @param project_id [String] ID of the project
    # @param firewall_name [String] Name of the firewall
    # @param action_location_firewall_attach_subnet_request [ActionLocationFirewallAttachSubnetRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetLocationFirewallDetails200Response]
    def action_location_firewall_attach_subnet(location, project_id, firewall_name, action_location_firewall_attach_subnet_request, opts = {})
      data, _status_code, _headers = action_location_firewall_attach_subnet_with_http_info(location, project_id, firewall_name, action_location_firewall_attach_subnet_request, opts)
      data
    end

    # Attach a subnet to firewall
    # @param location [String] The Ubicloud location/region
    # @param project_id [String] ID of the project
    # @param firewall_name [String] Name of the firewall
    # @param action_location_firewall_attach_subnet_request [ActionLocationFirewallAttachSubnetRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLocationFirewallDetails200Response, Integer, Hash)>] GetLocationFirewallDetails200Response data, response status code and response headers
    def action_location_firewall_attach_subnet_with_http_info(location, project_id, firewall_name, action_location_firewall_attach_subnet_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallApi.action_location_firewall_attach_subnet ...'
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling FirewallApi.action_location_firewall_attach_subnet"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling FirewallApi.action_location_firewall_attach_subnet"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling FirewallApi.action_location_firewall_attach_subnet, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'firewall_name' is set
      if @api_client.config.client_side_validation && firewall_name.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_name' when calling FirewallApi.action_location_firewall_attach_subnet"
      end
      # verify the required parameter 'action_location_firewall_attach_subnet_request' is set
      if @api_client.config.client_side_validation && action_location_firewall_attach_subnet_request.nil?
        fail ArgumentError, "Missing the required parameter 'action_location_firewall_attach_subnet_request' when calling FirewallApi.action_location_firewall_attach_subnet"
      end
      # resource path
      local_var_path = '/project/{project_id}/location/{location}/firewall/{firewall_name}/attach-subnet'.sub('{' + 'location' + '}', CGI.escape(location.to_s)).sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'firewall_name' + '}', CGI.escape(firewall_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(action_location_firewall_attach_subnet_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetLocationFirewallDetails200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"FirewallApi.action_location_firewall_attach_subnet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallApi#action_location_firewall_attach_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detach a subnet from firewall
    # @param location [String] The Ubicloud location/region
    # @param project_id [String] ID of the project
    # @param firewall_name [String] Name of the firewall
    # @param action_location_firewall_detach_subnet_request [ActionLocationFirewallDetachSubnetRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetLocationFirewallDetails200Response]
    def action_location_firewall_detach_subnet(location, project_id, firewall_name, action_location_firewall_detach_subnet_request, opts = {})
      data, _status_code, _headers = action_location_firewall_detach_subnet_with_http_info(location, project_id, firewall_name, action_location_firewall_detach_subnet_request, opts)
      data
    end

    # Detach a subnet from firewall
    # @param location [String] The Ubicloud location/region
    # @param project_id [String] ID of the project
    # @param firewall_name [String] Name of the firewall
    # @param action_location_firewall_detach_subnet_request [ActionLocationFirewallDetachSubnetRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLocationFirewallDetails200Response, Integer, Hash)>] GetLocationFirewallDetails200Response data, response status code and response headers
    def action_location_firewall_detach_subnet_with_http_info(location, project_id, firewall_name, action_location_firewall_detach_subnet_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallApi.action_location_firewall_detach_subnet ...'
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling FirewallApi.action_location_firewall_detach_subnet"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling FirewallApi.action_location_firewall_detach_subnet"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling FirewallApi.action_location_firewall_detach_subnet, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'firewall_name' is set
      if @api_client.config.client_side_validation && firewall_name.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_name' when calling FirewallApi.action_location_firewall_detach_subnet"
      end
      # verify the required parameter 'action_location_firewall_detach_subnet_request' is set
      if @api_client.config.client_side_validation && action_location_firewall_detach_subnet_request.nil?
        fail ArgumentError, "Missing the required parameter 'action_location_firewall_detach_subnet_request' when calling FirewallApi.action_location_firewall_detach_subnet"
      end
      # resource path
      local_var_path = '/project/{project_id}/location/{location}/firewall/{firewall_name}/detach-subnet'.sub('{' + 'location' + '}', CGI.escape(location.to_s)).sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'firewall_name' + '}', CGI.escape(firewall_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(action_location_firewall_detach_subnet_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetLocationFirewallDetails200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"FirewallApi.action_location_firewall_detach_subnet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallApi#action_location_firewall_detach_subnet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new firewall
    # @param project_id [String] ID of the project
    # @param create_firewall_request [CreateFirewallRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Firewall]
    def create_firewall(project_id, create_firewall_request, opts = {})
      data, _status_code, _headers = create_firewall_with_http_info(project_id, create_firewall_request, opts)
      data
    end

    # Create a new firewall
    # @param project_id [String] ID of the project
    # @param create_firewall_request [CreateFirewallRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Firewall, Integer, Hash)>] Firewall data, response status code and response headers
    def create_firewall_with_http_info(project_id, create_firewall_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallApi.create_firewall ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling FirewallApi.create_firewall"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling FirewallApi.create_firewall, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'create_firewall_request' is set
      if @api_client.config.client_side_validation && create_firewall_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_firewall_request' when calling FirewallApi.create_firewall"
      end
      # resource path
      local_var_path = '/project/{project_id}/firewall'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_firewall_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Firewall'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"FirewallApi.create_firewall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallApi#create_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new firewall
    # @param location [String] The Ubicloud location/region
    # @param project_id [String] ID of the project
    # @param firewall_name [String] Name of the firewall
    # @param create_location_firewall_request [CreateLocationFirewallRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Firewall]
    def create_location_firewall(location, project_id, firewall_name, create_location_firewall_request, opts = {})
      data, _status_code, _headers = create_location_firewall_with_http_info(location, project_id, firewall_name, create_location_firewall_request, opts)
      data
    end

    # Create a new firewall
    # @param location [String] The Ubicloud location/region
    # @param project_id [String] ID of the project
    # @param firewall_name [String] Name of the firewall
    # @param create_location_firewall_request [CreateLocationFirewallRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Firewall, Integer, Hash)>] Firewall data, response status code and response headers
    def create_location_firewall_with_http_info(location, project_id, firewall_name, create_location_firewall_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallApi.create_location_firewall ...'
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling FirewallApi.create_location_firewall"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling FirewallApi.create_location_firewall"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling FirewallApi.create_location_firewall, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'firewall_name' is set
      if @api_client.config.client_side_validation && firewall_name.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_name' when calling FirewallApi.create_location_firewall"
      end
      # verify the required parameter 'create_location_firewall_request' is set
      if @api_client.config.client_side_validation && create_location_firewall_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_location_firewall_request' when calling FirewallApi.create_location_firewall"
      end
      # resource path
      local_var_path = '/project/{project_id}/location/{location}/firewall/{firewall_name}'.sub('{' + 'location' + '}', CGI.escape(location.to_s)).sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'firewall_name' + '}', CGI.escape(firewall_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_location_firewall_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Firewall'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"FirewallApi.create_location_firewall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallApi#create_location_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specific firewall
    # @param project_id [String] ID of the project
    # @param firewall_name [String] Name of the firewall
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_firewall(project_id, firewall_name, opts = {})
      delete_firewall_with_http_info(project_id, firewall_name, opts)
      nil
    end

    # Delete a specific firewall
    # @param project_id [String] ID of the project
    # @param firewall_name [String] Name of the firewall
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_firewall_with_http_info(project_id, firewall_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallApi.delete_firewall ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling FirewallApi.delete_firewall"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling FirewallApi.delete_firewall, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'firewall_name' is set
      if @api_client.config.client_side_validation && firewall_name.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_name' when calling FirewallApi.delete_firewall"
      end
      # resource path
      local_var_path = '/project/{project_id}/firewall/{firewall_name}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'firewall_name' + '}', CGI.escape(firewall_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"FirewallApi.delete_firewall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallApi#delete_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specific firewall
    # @param location [String] The Ubicloud location/region
    # @param project_id [String] ID of the project
    # @param firewall_name [String] Name of the firewall
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_location_firewall(location, project_id, firewall_name, opts = {})
      delete_location_firewall_with_http_info(location, project_id, firewall_name, opts)
      nil
    end

    # Delete a specific firewall
    # @param location [String] The Ubicloud location/region
    # @param project_id [String] ID of the project
    # @param firewall_name [String] Name of the firewall
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_location_firewall_with_http_info(location, project_id, firewall_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallApi.delete_location_firewall ...'
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling FirewallApi.delete_location_firewall"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling FirewallApi.delete_location_firewall"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling FirewallApi.delete_location_firewall, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'firewall_name' is set
      if @api_client.config.client_side_validation && firewall_name.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_name' when calling FirewallApi.delete_location_firewall"
      end
      # resource path
      local_var_path = '/project/{project_id}/location/{location}/firewall/{firewall_name}'.sub('{' + 'location' + '}', CGI.escape(location.to_s)).sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'firewall_name' + '}', CGI.escape(firewall_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"FirewallApi.delete_location_firewall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallApi#delete_location_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return the list of firewalls in the project
    # @param project_id [String] ID of the project
    # @param [Hash] opts the optional parameters
    # @return [GetFirewall200Response]
    def get_firewall(project_id, opts = {})
      data, _status_code, _headers = get_firewall_with_http_info(project_id, opts)
      data
    end

    # Return the list of firewalls in the project
    # @param project_id [String] ID of the project
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetFirewall200Response, Integer, Hash)>] GetFirewall200Response data, response status code and response headers
    def get_firewall_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallApi.get_firewall ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling FirewallApi.get_firewall"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling FirewallApi.get_firewall, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/project/{project_id}/firewall'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetFirewall200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"FirewallApi.get_firewall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallApi#get_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details of a specific firewall
    # @param project_id [String] ID of the project
    # @param firewall_name [String] Name of the firewall
    # @param [Hash] opts the optional parameters
    # @return [Firewall]
    def get_firewall_details(project_id, firewall_name, opts = {})
      data, _status_code, _headers = get_firewall_details_with_http_info(project_id, firewall_name, opts)
      data
    end

    # Get details of a specific firewall
    # @param project_id [String] ID of the project
    # @param firewall_name [String] Name of the firewall
    # @param [Hash] opts the optional parameters
    # @return [Array<(Firewall, Integer, Hash)>] Firewall data, response status code and response headers
    def get_firewall_details_with_http_info(project_id, firewall_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallApi.get_firewall_details ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling FirewallApi.get_firewall_details"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling FirewallApi.get_firewall_details, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'firewall_name' is set
      if @api_client.config.client_side_validation && firewall_name.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_name' when calling FirewallApi.get_firewall_details"
      end
      # resource path
      local_var_path = '/project/{project_id}/firewall/{firewall_name}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'firewall_name' + '}', CGI.escape(firewall_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Firewall'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"FirewallApi.get_firewall_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallApi#get_firewall_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return the list of firewalls in the project and location
    # @param location [String] The Ubicloud location/region
    # @param project_id [String] ID of the project
    # @param [Hash] opts the optional parameters
    # @return [GetFirewall200Response]
    def get_location_firewall(location, project_id, opts = {})
      data, _status_code, _headers = get_location_firewall_with_http_info(location, project_id, opts)
      data
    end

    # Return the list of firewalls in the project and location
    # @param location [String] The Ubicloud location/region
    # @param project_id [String] ID of the project
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetFirewall200Response, Integer, Hash)>] GetFirewall200Response data, response status code and response headers
    def get_location_firewall_with_http_info(location, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallApi.get_location_firewall ...'
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling FirewallApi.get_location_firewall"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling FirewallApi.get_location_firewall"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling FirewallApi.get_location_firewall, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/project/{project_id}/location/{location}/firewall'.sub('{' + 'location' + '}', CGI.escape(location.to_s)).sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetFirewall200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"FirewallApi.get_location_firewall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallApi#get_location_firewall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details of a specific firewall
    # @param location [String] The Ubicloud location/region
    # @param project_id [String] ID of the project
    # @param firewall_name [String] Name of the firewall
    # @param [Hash] opts the optional parameters
    # @return [GetLocationFirewallDetails200Response]
    def get_location_firewall_details(location, project_id, firewall_name, opts = {})
      data, _status_code, _headers = get_location_firewall_details_with_http_info(location, project_id, firewall_name, opts)
      data
    end

    # Get details of a specific firewall
    # @param location [String] The Ubicloud location/region
    # @param project_id [String] ID of the project
    # @param firewall_name [String] Name of the firewall
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLocationFirewallDetails200Response, Integer, Hash)>] GetLocationFirewallDetails200Response data, response status code and response headers
    def get_location_firewall_details_with_http_info(location, project_id, firewall_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FirewallApi.get_location_firewall_details ...'
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling FirewallApi.get_location_firewall_details"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling FirewallApi.get_location_firewall_details"
      end
      pattern = Regexp.new(/^pj[0-9a-hj-km-np-tv-z]{24}$/)
      if @api_client.config.client_side_validation && project_id !~ pattern
        fail ArgumentError, "invalid value for 'project_id' when calling FirewallApi.get_location_firewall_details, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'firewall_name' is set
      if @api_client.config.client_side_validation && firewall_name.nil?
        fail ArgumentError, "Missing the required parameter 'firewall_name' when calling FirewallApi.get_location_firewall_details"
      end
      # resource path
      local_var_path = '/project/{project_id}/location/{location}/firewall/{firewall_name}'.sub('{' + 'location' + '}', CGI.escape(location.to_s)).sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'firewall_name' + '}', CGI.escape(firewall_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLocationFirewallDetails200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"FirewallApi.get_location_firewall_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FirewallApi#get_location_firewall_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

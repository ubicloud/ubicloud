=begin
#Clover API

#API for managing resources on Ubicloud

The version of the OpenAPI document: 0.1.0
Contact: support@ubicloud.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Ubicloud
  class PostgresDatabase
    # Kind of Postgres database
    attr_accessor :flavor

    # High availability type
    attr_accessor :ha_type

    # ID of the Postgres database
    attr_accessor :id

    # Location of the Postgres database
    attr_accessor :location

    # Name of the Postgres database
    attr_accessor :name

    # State of the Postgres database
    attr_accessor :state

    # Storage size in GiB
    attr_accessor :storage_size_gib

    # Postgres version
    attr_accessor :version

    # Size of the underlying VM
    attr_accessor :vm_size

    # CA certificates of the root CA used to issue postgres server certificates
    attr_accessor :ca_certificates

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'flavor' => :'flavor',
        :'ha_type' => :'ha_type',
        :'id' => :'id',
        :'location' => :'location',
        :'name' => :'name',
        :'state' => :'state',
        :'storage_size_gib' => :'storage_size_gib',
        :'version' => :'version',
        :'vm_size' => :'vm_size',
        :'ca_certificates' => :'ca_certificates'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'flavor' => :'String',
        :'ha_type' => :'String',
        :'id' => :'String',
        :'location' => :'String',
        :'name' => :'String',
        :'state' => :'String',
        :'storage_size_gib' => :'Integer',
        :'version' => :'String',
        :'vm_size' => :'String',
        :'ca_certificates' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'ca_certificates'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Ubicloud::PostgresDatabase` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Ubicloud::PostgresDatabase`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'flavor')
        self.flavor = attributes[:'flavor']
      else
        self.flavor = nil
      end

      if attributes.key?(:'ha_type')
        self.ha_type = attributes[:'ha_type']
      else
        self.ha_type = nil
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      else
        self.location = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      else
        self.state = nil
      end

      if attributes.key?(:'storage_size_gib')
        self.storage_size_gib = attributes[:'storage_size_gib']
      else
        self.storage_size_gib = nil
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      else
        self.version = nil
      end

      if attributes.key?(:'vm_size')
        self.vm_size = attributes[:'vm_size']
      else
        self.vm_size = nil
      end

      if attributes.key?(:'ca_certificates')
        self.ca_certificates = attributes[:'ca_certificates']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @flavor.nil?
        invalid_properties.push('invalid value for "flavor", flavor cannot be nil.')
      end

      if @ha_type.nil?
        invalid_properties.push('invalid value for "ha_type", ha_type cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      pattern = Regexp.new(/^pg[0-9a-hj-km-np-tv-z]{24}$/)
      if @id !~ pattern
        invalid_properties.push("invalid value for \"id\", must conform to the pattern #{pattern}.")
      end

      if @location.nil?
        invalid_properties.push('invalid value for "location", location cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      if @storage_size_gib.nil?
        invalid_properties.push('invalid value for "storage_size_gib", storage_size_gib cannot be nil.')
      end

      if @version.nil?
        invalid_properties.push('invalid value for "version", version cannot be nil.')
      end

      if @vm_size.nil?
        invalid_properties.push('invalid value for "vm_size", vm_size cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @flavor.nil?
      return false if @ha_type.nil?
      return false if @id.nil?
      return false if @id !~ Regexp.new(/^pg[0-9a-hj-km-np-tv-z]{24}$/)
      return false if @location.nil?
      return false if @name.nil?
      return false if @state.nil?
      return false if @storage_size_gib.nil?
      return false if @version.nil?
      return false if @vm_size.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] flavor Value to be assigned
    def flavor=(flavor)
      if flavor.nil?
        fail ArgumentError, 'flavor cannot be nil'
      end

      @flavor = flavor
    end

    # Custom attribute writer method with validation
    # @param [Object] ha_type Value to be assigned
    def ha_type=(ha_type)
      if ha_type.nil?
        fail ArgumentError, 'ha_type cannot be nil'
      end

      @ha_type = ha_type
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      pattern = Regexp.new(/^pg[0-9a-hj-km-np-tv-z]{24}$/)
      if id !~ pattern
        fail ArgumentError, "invalid value for \"id\", must conform to the pattern #{pattern}."
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] location Value to be assigned
    def location=(location)
      if location.nil?
        fail ArgumentError, 'location cannot be nil'
      end

      @location = location
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if state.nil?
        fail ArgumentError, 'state cannot be nil'
      end

      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] storage_size_gib Value to be assigned
    def storage_size_gib=(storage_size_gib)
      if storage_size_gib.nil?
        fail ArgumentError, 'storage_size_gib cannot be nil'
      end

      @storage_size_gib = storage_size_gib
    end

    # Custom attribute writer method with validation
    # @param [Object] version Value to be assigned
    def version=(version)
      if version.nil?
        fail ArgumentError, 'version cannot be nil'
      end

      @version = version
    end

    # Custom attribute writer method with validation
    # @param [Object] vm_size Value to be assigned
    def vm_size=(vm_size)
      if vm_size.nil?
        fail ArgumentError, 'vm_size cannot be nil'
      end

      @vm_size = vm_size
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          flavor == o.flavor &&
          ha_type == o.ha_type &&
          id == o.id &&
          location == o.location &&
          name == o.name &&
          state == o.state &&
          storage_size_gib == o.storage_size_gib &&
          version == o.version &&
          vm_size == o.vm_size &&
          ca_certificates == o.ca_certificates
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [flavor, ha_type, id, location, name, state, storage_size_gib, version, vm_size, ca_certificates].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Ubicloud.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
